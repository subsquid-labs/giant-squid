# account entity can be used to get info about current account state and absorb account actions 
type Account @entity {
  id: ID!
  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  crowdloans: [Contribution!] @derivedFrom(field: "account") # crowdloans there account get participation
  rewards: [Reward!] @derivedFrom(field: "account")
  slashes: [Slash!] @derivedFrom(field: "account")
  bonds: [Bond!] @derivedFrom(field: "account")
  stakingInfo: Staker @derivedFrom(field: "stash")

  syncedAt: Int!
}

### STAKING ###

enum StakingRole {
  Validator
  Nominator
  Idle
}

enum PayeeType {
  Staked
  Stash
  Controller
  Account
  None
}

# current information about stash, controller, payee and staking role
type Staker @entity {
  id: ID! #stash Id
  stashId: ID!
  stash: Account! @unique
  controllerId: ID!
  controller: Account!
  payeeId: ID
  payee: Account
  payeeType: PayeeType!
  role: StakingRole!
  activeBond: BigInt! # current bond balance
  totalReward: BigInt!
  totalSlash: BigInt!
  stakerHistory: [EraStaker!] @derivedFrom(field: "staker") # staker history for each era
  rewards: [Reward!] @derivedFrom(field: "staker")
  slashes: [Slash!] @derivedFrom(field: "staker")
  bonds: [Bond!] @derivedFrom(field: "staker")
}

# information about era, validators and nominators 
type Era @entity {
  id: ID!
  index: Int!
  timestamp: DateTime!
  startedAt: Int!
  endedAt: Int
  total: BigInt!
  validatorsCount: Int!
  nominatorsCount: Int!
  stakers: [EraStaker] @derivedFrom(field: "era")
}

type EraNomination @entity {
  id: ID! #era + validatorId + nominatorId
  era: Era!
  nominator: EraStaker
  validator: EraStaker
  vote: BigInt!
}

# information about validator in era: self/total bond, nominators and their votes
type EraStaker @entity {
  id: ID! #era + stashId
  stakerId: ID!
  staker: Staker!
  era: Era!
  role: StakingRole!
  selfBonded: BigInt!
  totalBonded: BigInt!
  totalReward: BigInt!
  totalSlash: BigInt!
  commission: Int
  nominators: [EraNomination!] @derivedFrom(field: "validator")
  validators: [EraNomination!] @derivedFrom(field: "nominator")
}

# information about known parachains and their crowdloans
type Parachain @entity {
  id: ID! #paraId
  crowdloans: [Crowdloan!] @derivedFrom(field: "parachain")
}

enum CrowdloanStatus {
  Started
  Ended
  Dissolved
}

enum TransferDirection {
  From
  To
}

type Contribution @entity {
  id: ID!
  crowdloanId: ID
  crowdloan: Crowdloan
  accountId: ID!
  account: Account!
  amount: BigInt!
}

type Crowdloan @entity {
  id: ID!
  cap: BigInt!
  firstPeriod: Int!
  lastPeriod: Int!
  createdAt: Int
  createdAtTimestamp: DateTime
  endedAt: Int @index
  endedAtTimestamp: DateTime
  contributions: [Contribution!] @derivedFrom(field: "crowdloan")
  raised: BigInt!
  parachainId: ID
  parachain: Parachain
  status: CrowdloanStatus!
}

interface Action {
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String
}

type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fromId: ID!
  from: Account!
  toId: ID
  to: Account
  amount: BigInt! @index
  success: Boolean! @index
}

# entity for linking account and transfer
type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  accountId: ID!
  account: Account!
  direction: TransferDirection
}

type Reward @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID
  account: Account
  amount: BigInt!
  era: Int
  validatorId: ID
  stakerId: ID!
  staker: Staker!
}

type Slash @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt!
  era: Int
  stakerId: ID!
  staker: Staker
}

enum BondType {
  Bond
  Unbond
}

type Bond @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  type: BondType
  stakerId: ID!
  staker: Staker
}