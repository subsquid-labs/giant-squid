type Account @entity {
  id: ID!
  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  lastUpdateBlock: BigInt!
}

enum TransferDirection {
  FROM
  TO
}

interface Action {
  timestamp: DateTime
  blockNumber: BigInt
  extrinsicHash: String
}

interface CanFail {
  success: Boolean
}

type Transfer implements Action & CanFail @entity {
  id: ID!
  timestamp: DateTime
  blockNumber: BigInt
  extrinsicHash: String @index
  to: TransferLocation
  from: TransferLocation
  asset: TransferAsset
  success: Boolean @index
  type: TransferType
}

union TransferLocation = TransferLocationAccount | TransferLocationEvm | TransferLocationXcm

type TransferLocationAccount {
  id: String!
}

type TransferLocationEvm {
  address: String!
}

union TransferAsset = TransferAssetToken | TransferAssetMultiToken

enum TransferType {
  Native
  Currency
  Xcm
}

type TransferAssetToken {
  symbol: String
  decimals: Int
  amount: BigInt
}

type TransferAssetMultiToken {
  tokens: [TransferAssetToken]
}

type TransferLocationXcm {
  id: String
  paraId: Int
}

type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  account: Account!
  direction: TransferDirection
}

# type XcmTransfer implements CanFail @entity {
#   id: ID!
#   timestamp: DateTime
#   blockNumber: BigInt @index
#   extrinsicHash: String @index
#   from: TransferLocation!
#   to: XcmDestination!
#   assets: [XcmAsset]!
#   success: Boolean @index
# }