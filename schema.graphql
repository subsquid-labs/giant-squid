type Account @entity {
  id: ID!
  activeBond: BigInt!
  totalReward: BigInt!
  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  rewards: [Reward!] @derivedFrom(field: "account")
  bonds: [Bond!] @derivedFrom(field: "account")
  lastUpdateBlock: Int!
}

enum TransferDirection {
  FROM
  TO
}

interface Action {
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String
  amount: BigInt
}

interface HasRound {
  round: Int
}

interface CanFail {
  success: Boolean
}

type Transfer implements Action & CanFail @entity {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  toId: ID
  to: Account
  fromId: ID!
  from: Account!
  amount: BigInt
  success: Boolean @index
}

type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  account: Account!
  direction: TransferDirection
}

type Reward implements Action & HasRound @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  round: Int
}

enum BondType {
  Bond
  Unbond
}

type Bond implements Action & CanFail @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  success: Boolean @index
  type: BondType
  candidate: String
}

type Round @entity {
  id: ID!
  index: Int!
  timestamp: DateTime!
  startedAt: Int!
  endedAt: Int
  collatorsCount: Int!
  total: BigInt!
}