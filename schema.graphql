# account entity can be used to get info about current account state and absorb account actions 
type Account @entity {
  id: ID!
  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  crowdloans: [Contributor!] @derivedFrom(field: "account") # crowdloans there account get participation
  contributions: [Contribution!] @derivedFrom(field: "account")
  rewards: [Reward!] @derivedFrom(field: "account")
  slashes: [Slash!] @derivedFrom(field: "account")
  bonds: [Bond!] @derivedFrom(field: "account")
  stakingInfo: Staker @derivedFrom(field: "stash")
  lastUpdateBlock: Int!
}

enum StakingRole {
  Validator
  Nominator
  Idle
}

enum PayeeType {
  Staked
  Stash
  Controller
  Account
  None
}

# current information about stash, controller, payee and staking role
type Staker @entity {
  id: ID! #stash Id
  stashId: ID!
  stash: Account! @unique
  controllerId: ID!
  controller: Account!
  payeeId: ID!
  payee: Account
  payeeType: PayeeType!
  role: StakingRole!
  commission: Int
  activeBond: BigInt! # current bond balance
  totalReward: BigInt!
  totalSlash: BigInt!
  validatorHistory: [EraValidator!] @derivedFrom(field: "staker") # validator history for each era
  nominatorHistory: [EraNominator!] @derivedFrom(field: "staker") # nominator history for each era
  rewards: [Reward!] @derivedFrom(field: "staker")
  slashes: [Slash!] @derivedFrom(field: "staker")
  bonds: [Bond!] @derivedFrom(field: "staker")
}

# information about era, validators and nominators 
type Era @entity {
  id: ID!
  index: Int!
  timestamp: DateTime!
  startedAt: Int!
  endedAt: Int
  total: BigInt!
  validatorsCount: Int!
  nominatorsCount: Int!
  validators: [EraValidator] @derivedFrom(field: "era")
  nominators: [EraNominator] @derivedFrom(field: "era")
}

type EraNomination @entity {
  id: ID! #era + validatorId + nominatorId
  era: Era!
  nominator: EraNominator
  validator: EraValidator
  vote: BigInt!
}

# information about validator in era: self/total bond, nominators and their votes
type EraValidator @entity {
  id: ID! #era + stashId
  stakerId: ID!
  staker: Staker!
  era: Era!
  selfBonded: BigInt!
  totalBonded: BigInt!
  commission: Int
  nominators: [EraNomination] @derivedFrom(field: "validator")
}

# information about nominator in era: bond, validators and votes for them in each era
type EraNominator @entity {
  id: ID! #era + stashId
  stakerId: ID!
  staker: Staker!
  era: Era!
  bonded: BigInt!
  validators: [EraNomination] @derivedFrom(field: "nominator")
}

# information about known parachains and their crowdloans
type Parachain @entity {
  id: ID! #paraId
  paraId: Int
  crowdloans: [Crowdloan!] @derivedFrom(field: "parachain")
}

enum CrowdloanStatus {
  CREATED
  WON
  DISSOLVED
}

enum TransferDirection {
  FROM
  TO
}

type Contributor @entity {
  id: ID!
  crowdloan: Crowdloan!
  account: Account!
  amount: BigInt!
  contributions: [Contribution!] @derivedFrom(field: "contributor")
}

type Crowdloan @entity {
  id: ID!
  cap: BigInt!
  firstPeriod: Int!
  lastPeriod: Int!
  end: Int!
  contributors: [Contributor!] @derivedFrom(field: "crowdloan")
  raised: BigInt!
  parachainId: ID!
  parachain: Parachain!
  start: Int @index
  createdAt: DateTime
}

interface Action {
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String
  amount: BigInt
}

interface HasEra {
  era: Int
}

interface CanFail {
  success: Boolean
}

type Contribution implements Action & CanFail @entity {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  crowdloanId: ID!
  crowdloan: Crowdloan
  success: Boolean @index
  accountId: ID!
  account: Account!
  contributor: Contributor!
  amount: BigInt
}

type Transfer implements Action & CanFail @entity {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  toId: ID
  to: Account
  fromId: ID!
  from: Account!
  amount: BigInt
  success: Boolean @index
}

# entity for linking account and transfer
type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  account: Account!
  direction: TransferDirection
}

type Reward implements Action & HasEra @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  era: Int
  validator: String
  staker: Staker
}

type Slash implements Action & HasEra @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  era: Int
  staker: Staker
}

enum BondType {
  Bond
  Unbond
}

type Bond implements Action & CanFail @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  success: Boolean @index
  type: BondType
  staker: Staker
}