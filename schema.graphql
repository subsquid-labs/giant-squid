type Account @entity {
  id: ID!
  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  rewards: [Reward!] @derivedFrom(field: "account")
  bonds: [Bond!] @derivedFrom(field: "account")
  stakingInfo: Staker @derivedFrom(field: "stash")
  lastUpdateBlock: Int!
}

enum StakingRole {
  Collator
  Nominator
  Idle
}

# current information about stash, controller, payee and staking role
type Staker @entity {
  id: ID! #stash Id
  stashId: ID!
  stash: Account! @unique
  role: StakingRole!
  commission: Float
  activeBond: BigInt! # current bond balance
  totalReward: BigInt!
  collatorHistory: [RoundCollator!] @derivedFrom(field: "staker") # collator history for each round
  nominatorHistory: [RoundNominator!] @derivedFrom(field: "staker") # nominator history for each round
  rewards: [Reward!] @derivedFrom(field: "staker")
  bonds: [Bond!] @derivedFrom(field: "staker")
}

enum TransferDirection {
  From
  To
}

interface Action {
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String
}

interface HasRound {
  round: Int
}

interface CanFail {
  success: Boolean
}

type Transfer implements Action & CanFail @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  extrinsicHash: String! @index
  to: TransferLocation
  from: TransferLocation!
  asset: TransferAsset!
  success: Boolean! @index
  type: TransferType!
}

union TransferLocation = TransferLocationAccount | TransferLocationEvm | TransferLocationXcm

type TransferLocationAccount {
  id: String!
}

type TransferLocationEvm {
  address: String!
}

union TransferAsset = TransferAssetToken | TransferAssetMultiToken

enum TransferType {
  Native
  Contribution
  Xcm
}

type TransferAssetToken {
  symbol: String
  amount: BigInt
}

type TransferAssetMultiToken {
  tokens: [TransferAssetToken]
}

type TransferLocationXcm {
  id: String
  paraId: Int
}

type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  account: Account!
  direction: TransferDirection
}

type Reward implements Action & HasRound @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  round: Int
  staker: Staker
}

enum BondType {
  Bond
  Unbond
}

type Bond implements Action & CanFail @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int @index
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  success: Boolean @index
  type: BondType
  candidate: String
  staker: Staker
}

type Round @entity {
  id: ID!
  index: Int!
  timestamp: DateTime!
  startedAt: Int!
  endedAt: Int
  collatorsCount: Int!
  collators: [RoundCollator] @derivedFrom(field: "round")
  nominators: [RoundNominator] @derivedFrom(field: "round")
  total: BigInt!
}

type RoundCollator @entity {
  id: ID!
  round: Round!
  selfBond: BigInt!
  totalBond: BigInt!
  commission: Float!
  nominators: [RoundNomination!] @derivedFrom(field: "collator")
  nominatorsCount: Int!
  stakerId: ID!
  staker: Staker!
}

type RoundNominator @entity {
  id: ID!
  round: Round!
  bond: BigInt!
  collators: [RoundNomination!] @derivedFrom(field: "nominator")
  collatorsCount: Int!
  stakerId: ID!
  staker: Staker!
}

type RoundNomination @entity {
  id: ID!
  round: Round!
  collator: RoundCollator!
  nominator: RoundNominator!
  vote: BigInt!
}