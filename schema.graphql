type Account @entity {
  id: ID!
  activeBond: BigInt!
  totalReward: BigInt!
  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  bonds: [Bond!] @derivedFrom(field: "account")
  rewards: [Reward!] @derivedFrom(field: "account")
  lastUpdateBlock: Int!
}

enum TransferDirection {
  FROM
  TO
}

interface CanFail {
  success: Boolean
}

type Transfer implements CanFail @entity {
  id: ID!
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String @index
  toId: ID
  to: Account
  fromId: ID
  from: Account
  amount: BigInt
  success: Boolean @index
}

type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  account: Account!
  direction: TransferDirection
}

interface HasTotal {
  total: BigInt
}

type Reward implements HasTotal @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  era: Int
  smartContract: String
  total: BigInt
}

enum BondType {
  Bond
  Unbond
}

type Bond implements HasTotal & CanFail @entity  {
  id: ID!
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String @index
  accountId: ID!
  account: Account!
  amount: BigInt
  total: BigInt
  smartContract: String
  success: Boolean
  type: BondType
}